# Usar una imagen base con Python 3.12 y Alpine para un tamaño más ligero
FROM python:3.12-slim

# Instalación de dependencias adicionales necesarias para el sistema
RUN apt-get update \
    && apt-get install -y --no-install-recommends mariadb-client \
    && apt-get install -y --no-install-recommends gcc libc-dev python3-dev libffi-dev \
    && apt-get install -y --no-install-recommends curl \
    && apt-get install -y --no-install-recommends bash \
    && apt-get install -y --no-install-recommends openrc \
    && apt-get install -y --no-install-recommends build-essential \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Establecer el directorio de trabajo dentro del contenedor
WORKDIR /app

# Montar la carpeta `uploads` directamente dentro del contenedor
VOLUME /app/uploads

# Copiar los archivos necesarios para la aplicación
COPY app/ ./app
COPY core/ ./core
COPY requirements.txt .

# Limpiar cachés y archivos temporales
RUN find . -type d -name "__pycache__" -exec rm -r {} + && \
    find . -type f -name "*.pyc" -exec rm -f {} +

# Copiar el script de entrada y dar permisos de ejecución
COPY docker/entrypoints/render_entrypoint.sh /app/render_entrypoint.sh
RUN chmod +x /app/render_entrypoint.sh

# Copiar el script de espera por la base de datos y dar permisos de ejecución
COPY scripts/wait-for-db.sh /app/scripts/wait-for-db.sh
RUN chmod +x /app/scripts/wait-for-db.sh

# Crear el archivo .moduleignore para evitar módulos no deseados
RUN echo "webhook" > /app/.moduleignore

# Actualizar pip
RUN pip install --no-cache-dir --upgrade pip

# Instalar los paquetes necesarios especificados en requirements.txt
RUN pip install -r requirements.txt

# Exponer el puerto 80 para la aplicación
EXPOSE 80

# Comando para iniciar la aplicación
CMD ["./render_entrypoint.sh"]
