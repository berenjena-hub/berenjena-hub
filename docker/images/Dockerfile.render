# Dockerfile modificado para incluir la carpeta uploads
FROM python:3.12-slim

# Instalación de dependencias
RUN apt-get update \
    && apt-get install -y --no-install-recommends mariadb-client \
    && apt-get install -y --no-install-recommends gcc libc-dev python3-dev libffi-dev \
    && apt-get install -y --no-install-recommends curl \
    && apt-get install -y --no-install-recommends bash \
    && apt-get install -y --no-install-recommends openrc \
    && apt-get install -y --no-install-recommends build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set the working directory in the container to /app
WORKDIR /app

# Copiar los archivos de la aplicación
COPY app/ ./app
COPY core/ ./core
COPY migrations/ ./migrations

# Copiar la carpeta uploads
COPY uploads/ ./uploads

# Copiar requirements.txt en el directorio de trabajo /app
COPY requirements.txt .

# Eliminar cachés de la compilación
RUN find . -type d -name "__pycache__" -exec rm -r {} + && \
    find . -type f -name "*.pyc" -exec rm -f {} +

# Copiar el punto de entrada y establecer permisos de ejecución
COPY docker/entrypoints/render_entrypoint.sh /app/render_entrypoint.sh
RUN chmod +x /app/render_entrypoint.sh

# Copiar el script wait-for-db.sh y establecer permisos de ejecución
COPY scripts/wait-for-db.sh /app/scripts/wait-for-db.sh
RUN chmod +x /app/scripts/wait-for-db.sh

# Crear el archivo .moduleignore con el módulo 'webhook' dentro
RUN echo "webhook" > /app/.moduleignore

# Actualizar pip
RUN pip install --no-cache-dir --upgrade pip

# Instalar cualquier paquete necesario especificado en requirements.txt
RUN pip install -r requirements.txt

# Exponer el puerto 80
EXPOSE 80

# Comando para ejecutar la aplicación
CMD ["./render_entrypoint.sh"]
